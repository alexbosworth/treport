"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _autoBind = _interopRequireDefault(require("auto-bind"));

var _logUpdate = _interopRequireDefault(require("log-update"));

var _reconciler = _interopRequireDefault(require("./reconciler"));

var _renderer = _interopRequireDefault(require("./renderer"));

var _dom = require("./dom");

var _App = _interopRequireDefault(require("./components/App"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Instance {
  constructor(options) {
    (0, _autoBind.default)(this);
    this.options = options;
    this.rootNode = (0, _dom.createNode)('root');
    this.renderer = (0, _renderer.default)({
      terminalWidth: options.stdout.columns
    });
    this.log = _logUpdate.default.create(options.stdout);
    this.throttledLog = options.debug ? this.log : (0, _lodash.default)(this.log, {
      leading: true,
      trailing: true
    }); // Ignore last render after unmounting a tree to prevent empty output before exit

    this.ignoreRender = false; // Store last output to only rerender when needed

    this.lastOutput = '';
    this.lastStaticOutput = ''; // This variable is used only in debug mode to store full static output
    // so that it's rerendered every time, not just new static parts, like in non-debug mode

    this.fullStaticOutput = '';
    this.reconciler = (0, _reconciler.default)(this.onRender);
    this.container = this.reconciler.createContainer(this.rootNode, false);
    this.exitPromise = new Promise(resolve => {
      this.resolveExitPromise = resolve;
    });
  }

  onRender() {
    if (this.ignoreRender) {
      return;
    }

    const {
      output,
      staticOutput
    } = this.renderer(this.rootNode); // If <Static> output isn't empty, it means new children have been added to it

    const hasNewStaticOutput = staticOutput && staticOutput !== '\n' && staticOutput !== this.lastStaticOutput;

    if (this.options.debug) {
      if (hasNewStaticOutput) {
        this.fullStaticOutput += staticOutput;
        this.lastStaticOutput = staticOutput;
      }

      this.options.stdout.write(this.fullStaticOutput + output);
      return;
    } // To ensure static output is cleanly rendered before main output, clear main output first


    if (hasNewStaticOutput) {
      this.log.clear();
      this.options.stdout.write(staticOutput);
      this.log(output);
      this.lastStaticOutput = staticOutput;
    }

    if (output !== this.lastOutput) {
      this.throttledLog(output);
      this.lastOutput = output;
    }
  }

  render(node) {
    const tree = _react.default.createElement(_App.default, {
      stdin: this.options.stdin,
      stdout: this.options.stdout,
      exitOnCtrlC: this.options.exitOnCtrlC,
      onExit: this.unmount
    }, node);

    this.reconciler.updateContainer(tree, this.container);
  }

  unmount() {
    this.onRender();
    this.log.done();
    this.ignoreRender = true;
    this.reconciler.updateContainer(null, this.container);
    this.resolveExitPromise();
  }

  waitUntilExit() {
    return this.exitPromise;
  }

}

exports.default = Instance;